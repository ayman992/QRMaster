<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>QRMaster</title>
<style>
  :root{--bg1:#6a11cb;--bg2:#2575fc}
  body{font-family:system-ui,Arial,Helvetica,sans-serif;margin:0;background:linear-gradient(135deg,var(--bg1),var(--bg2));color:#fff;min-height:100vh;display:flex;align-items:center;justify-content:center;padding:18px}
  .app{width:100%;max-width:980px}
  header{display:flex;justify-content:space-between;align-items:center;margin-bottom:14px;gap:10px;flex-wrap:wrap}
  h1{font-size:22px;margin:0}
  .grid{display:grid;grid-template-columns:1fr 440px;gap:18px}
  .card{background:rgba(255,255,255,0.08);padding:16px;border-radius:14px;backdrop-filter: blur(3px)}
  label{display:block;margin-bottom:8px;font-size:14px}
  /* مدخلات داخل المربعات — نص بالأسود */
  select,input[type=text],input[type=file],textarea{
    width:100%;padding:10px;border-radius:10px;border:0;
    background:rgba(255,255,255,0.95);color:#000;outline:none
  }
  input[type=color]{padding:6px;border-radius:8px;border:0;background:#fff}
  button{padding:10px 12px;border-radius:10px;border:0;background:#ff9800;color:#000;cursor:pointer}
  button.secondary{background:#ffffff;color:#000}
  .muted{color:rgba(255,255,255,0.85);font-size:13px}
  #previewWrap{display:flex;flex-direction:column;align-items:center;gap:8px}
  canvas, svg{background:#fff;border-radius:8px;max-width:100%}
  .small{font-size:13px;color:rgba(255,255,255,0.9)}
  .actions{display:flex;gap:8px;flex-wrap:wrap}
  #video{width:100%;max-height:320px;background:#000;border-radius:12px;display:block}
  #shareFallback{display:none;margin-top:10px;gap:8px;flex-wrap:wrap}
  #shareFallback a{background:#fff;color:#000;padding:8px 10px;border-radius:10px;text-decoration:none;font-size:14px}
  .row{display:grid;grid-template-columns:1fr 1fr;gap:10px}
  @media(max-width:960px){.grid{grid-template-columns:1fr}.card{padding:12px}}
</style>
</head>
<body>
  <div class="app">
    <header>
      <h1>QRMaster</h1>
      <div class="muted">QR generator • Camera scanner • Image scanner • Barcode support</div>
    </header>

    <div class="grid">
      <div class="card">
        <label for="mode">Mode</label>
        <select id="mode">
          <option value="generate">Generate</option>
          <option value="scan">Scan (camera)</option>
          <option value="image">Scan from image</option>
        </select>

        <!-- Generate Area -->
        <div id="genArea" style="margin-top:12px">
          <label for="type">Data type</label>
          <select id="type">
            <option value="text">Text / URL</option>
            <option value="phone">Phone number</option>
            <option value="sms">SMS</option>
            <option value="wifi">Wi-Fi</option>
            <option value="vcard">Contact (vCard)</option>
            <option value="instagram">Instagram</option>
            <option value="facebook">Facebook</option>
            <option value="tiktok">TikTok</option>
            <option value="twitter">Twitter</option>
            <option value="snapchat">Snapchat</option>
            <option value="barcode_code128">Barcode — Code128</option>
            <option value="barcode_ean13">Barcode — EAN13</option>
          </select>

          <div id="inputs" style="margin-top:12px">
            <div id="input-text"><label>Text / URL</label><input id="inp-text" type="text" placeholder="https://example.com or any text"></div>
            <div id="input-phone" style="display:none"><label>Phone</label><input id="inp-phone" type="text" placeholder="+1234567890"></div>
            <div id="input-sms" style="display:none"><label>SMS (number and message separated by | )</label><input id="inp-sms" type="text" placeholder="+1234567890|Hello"></div>
            <div id="input-wifi" style="display:none">
              <label>Wi-Fi (SSID)</label><input id="inp-wifi-ssid" type="text" placeholder="SSID">
              <label style="margin-top:8px">Encryption</label><select id="inp-wifi-type"><option>WPA</option><option>WEP</option><option>nopass</option></select>
              <label style="margin-top:8px">Password</label><input id="inp-wifi-pass" type="text" placeholder="password">
            </div>
            <div id="input-vcard" style="display:none"><label>Name</label><input id="v-name" type="text"><label style="margin-top:8px">Phone</label><input id="v-tel" type="text"><label style="margin-top:8px">Email</label><input id="v-email" type="text"></div>
            <div id="input-social" style="display:none"><label>Username (social)</label><input id="inp-social" type="text" placeholder="username"></div>
            <div id="input-barcode" style="display:none"><label>Barcode data</label><input id="inp-barcode" type="text" placeholder="For EAN13 enter 12 digits"></div>
          </div>

          <div class="row" style="margin-top:12px">
            <div>
              <label>QR Color</label>
              <input type="color" id="qrColor" value="#000000">
            </div>
            <div>
              <label>QR Background</label>
              <input type="color" id="qrBgColor" value="#ffffff">
            </div>
          </div>
          <div class="small" style="margin-top:6px">Color options apply to QR only (not 1D barcodes).</div>

          <div class="actions" style="margin-top:12px">
            <button id="btnGenerate">Generate</button>
            <button id="btnDownload" style="display:none">Download</button>
            <button id="btnShare" style="display:none">Share</button>
            <button id="btnClear" class="secondary">Clear</button>
          </div>
          <div id="shareFallback" class="actions"></div>
        </div>

        <!-- Camera Scan Area -->
        <div id="scanArea" style="display:none;margin-top:12px">
          <label>Camera</label>
          <div class="row">
            <select id="cameraSelect">
              <option value="auto">Auto (prefer back)</option>
            </select>
            <div class="actions">
              <button id="btnStart">Start</button>
              <button id="btnStop" style="display:none;background:#e53935;color:#fff">Stop</button>
            </div>
          </div>
          <video id="video" playsinline></video>
          <div class="small" style="margin-top:8px">If you can’t see the camera, make sure the page is served over <b>HTTPS</b> (or localhost) and allow camera permission.</div>
        </div>

        <!-- Image Scan Area -->
        <div id="imgArea" style="display:none;margin-top:12px">
          <label>Choose image with QR/Barcode</label>
          <input id="imgFile" type="file" accept="image/*">
          <div class="small" style="margin-top:6px">We’ll detect QR from the selected image locally (no upload).</div>
        </div>

      </div>

      <div class="card" id="previewCard">
        <div id="previewWrap">
          <div class="small">Preview / Result</div>
          <div id="previewBox" style="display:flex;align-items:center;justify-content:center;min-height:200px"></div>
          <div id="resultText" class="muted" style="margin-top:8px"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- libraries -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.min.js"></script>

  <script>
    // Elements
    const modeEl = document.getElementById('mode');
    const genArea = document.getElementById('genArea');
    const scanArea = document.getElementById('scanArea');
    const imgArea = document.getElementById('imgArea');

    const typeEl = document.getElementById('type');
    const previewBox = document.getElementById('previewBox');
    const resultText = document.getElementById('resultText');

    const inpText = document.getElementById('inp-text');
    const inpPhone = document.getElementById('inp-phone');
    const inpSms = document.getElementById('inp-sms');
    const inpWifiSsid = document.getElementById('inp-wifi-ssid');
    const inpWifiType = document.getElementById('inp-wifi-type');
    const inpWifiPass = document.getElementById('inp-wifi-pass');
    const vName = document.getElementById('v-name');
    const vTel = document.getElementById('v-tel');
    const vEmail = document.getElementById('v-email');
    const inpSocial = document.getElementById('inp-social');
    const inpBarcode = document.getElementById('inp-barcode');

    const qrColor = document.getElementById('qrColor');
    const qrBgColor = document.getElementById('qrBgColor');

    const btnGenerate = document.getElementById('btnGenerate');
    const btnDownload = document.getElementById('btnDownload');
    const btnShare = document.getElementById('btnShare');
    const btnClear = document.getElementById('btnClear');
    const shareFallback = document.getElementById('shareFallback');

    // Scanner elements
    const video = document.getElementById('video');
    const cameraSelect = document.getElementById('cameraSelect');
    const btnStart = document.getElementById('btnStart');
    const btnStop = document.getElementById('btnStop');

    let currentQrCanvas = null;
    let currentSvg = null;
    let scanStream = null;
    let rafId = null;
    let devicesCache = [];

    // Mode Switch
    function updateMode(){
      const m = modeEl.value;
      genArea.style.display = (m==='generate') ? '' : 'none';
      scanArea.style.display = (m==='scan') ? '' : 'none';
      imgArea.style.display = (m==='image') ? '' : 'none';
      if(m!=='scan') stopScan();
      if(m!=='generate') clearShareFallback();
    }
    modeEl.addEventListener('change', updateMode);
    updateMode();

    // Inputs UX
    function hideAllInputs(){ document.querySelectorAll('#inputs > div').forEach(d=>d.style.display='none'); }
    function updateInputs(){
      hideAllInputs();
      const t = typeEl.value;
      if(t==='text') document.getElementById('input-text').style.display='block';
      else if(t==='phone') document.getElementById('input-phone').style.display='block';
      else if(t==='sms') document.getElementById('input-sms').style.display='block';
      else if(t==='wifi') document.getElementById('input-wifi').style.display='block';
      else if(t==='vcard') document.getElementById('input-vcard').style.display='block';
      else if(['instagram','facebook','tiktok','twitter','snapchat'].includes(t)) document.getElementById('input-social').style.display='block';
      else if(t.startsWith('barcode')) document.getElementById('input-barcode').style.display='block';
    }
    typeEl.addEventListener('change', updateInputs);
    updateInputs();

    // Build payload
    function buildPayload(){
      const t = typeEl.value;
      if(t==='text') return inpText.value.trim();
      if(t==='phone') return 'tel:'+inpPhone.value.trim();
      if(t==='sms'){ const v=inpSms.value.split('|'); return `SMSTO:${(v[0]||'').trim()}:${(v[1]||'').trim()}`; }
      if(t==='wifi') return `WIFI:T:${inpWifiType.value};S:${inpWifiSsid.value};P:${inpWifiPass.value};;`;
      if(t==='vcard') return `BEGIN:VCARD\nVERSION:3.0\nFN:${vName.value}\nTEL:${vTel.value}\nEMAIL:${vEmail.value}\nEND:VCARD`;
      if(t==='instagram') return 'https://instagram.com/'+inpSocial.value.trim();
      if(t==='facebook') return 'https://facebook.com/'+inpSocial.value.trim();
      if(t==='tiktok') return 'https://tiktok.com/@'+inpSocial.value.trim();
      if(t==='twitter') return 'https://twitter.com/'+inpSocial.value.trim();
      if(t==='snapchat') return 'https://snapchat.com/add/'+inpSocial.value.trim();
      if(t==='barcode_code128' || t==='barcode_ean13') return inpBarcode.value.trim();
      return '';
    }

    function clearPreview(){
      previewBox.innerHTML = '';
      currentQrCanvas = null; currentSvg = null;
      btnDownload.style.display='none'; btnShare.style.display='none';
      resultText.textContent = '';
      clearShareFallback();
    }
    function clearShareFallback(){ shareFallback.innerHTML=''; shareFallback.style.display='none'; }

    btnClear.addEventListener('click', clearPreview);

    // Generate
    btnGenerate.addEventListener('click', ()=>{
      clearPreview();
      const payload = buildPayload();
      if(!payload){ alert('Please enter valid data'); return; }

      const type = typeEl.value;

      // 1D barcode
      if(type==='barcode_code128' || type==='barcode_ean13'){
        if(type==='barcode_ean13'){
          const digits = payload.replace(/\D/g,'');
          if(digits.length!==12){ alert('EAN13 requires exactly 12 digits'); return; }
        }
        const svgNS = 'http://www.w3.org/2000/svg';
        const svg = document.createElementNS(svgNS,'svg');
        svg.setAttribute('id','generatedBarcode');
        svg.style.width='100%'; svg.style.height='120px';
        previewBox.appendChild(svg);
        try{
          JsBarcode(svg, payload, {format:(type==='barcode_code128'?'CODE128':'EAN13'), lineColor:'#000', width:2, height:110, displayValue:true});
          currentSvg = svg;
          resultText.textContent = payload;
          btnDownload.style.display='inline-block';
          // sharing text only (no files for barcode)
          btnShare.style.display='inline-block';
        }catch(e){ alert('Barcode error: '+e.message); clearPreview(); }
        return;
      }

      // QR
      const qrColorVal = qrColor.value || '#000000';
      const qrBgVal = qrBgColor.value || '#ffffff';
      const tmp = document.createElement('div');
      new QRCode(tmp, {text: payload, width: 300, height: 300, colorDark: qrColorVal, colorLight: qrBgVal, correctLevel: QRCode.CorrectLevel.H});
      const producedCanvas = tmp.querySelector('canvas');
      const canvas = document.createElement('canvas'); canvas.width=300; canvas.height=300;
      const ctx = canvas.getContext('2d');
      ctx.fillStyle = qrBgVal; ctx.fillRect(0,0,300,300);
      if(producedCanvas){ ctx.drawImage(producedCanvas,0,0); }
      previewBox.appendChild(canvas);
      currentQrCanvas = canvas;
      resultText.textContent = payload;
      btnDownload.style.display='inline-block'; btnShare.style.display='inline-block';
    });

    // Download
    btnDownload.addEventListener('click', ()=>{
      if(currentQrCanvas){
        const a = document.createElement('a'); a.download='qrcode.png'; a.href=currentQrCanvas.toDataURL('image/png'); a.click();
      } else if(currentSvg){
        const xml = new XMLSerializer().serializeToString(currentSvg);
        const blob = new Blob([xml],{type:'image/svg+xml'});
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a'); a.href = url; a.download = 'barcode.svg'; a.click();
        setTimeout(()=>URL.revokeObjectURL(url), 1000);
      }
    });

    // Share
    btnShare.addEventListener('click', async ()=>{
      const text = resultText.textContent || '';
      clearShareFallback();
      // Prefer Web Share API (share text only for best compatibility)
      try{
        if(navigator.share){
          await navigator.share({title:'QRMaster', text});
          return;
        }
      }catch(e){ /* if user cancels do nothing */ }
      // Fallback: show social links
      const encoded = encodeURIComponent(text);
      const links = [
        {name:'WhatsApp', href:`https://wa.me/?text=${encoded}`},
        {name:'Facebook', href:`https://www.facebook.com/sharer/sharer.php?u=${encoded}&quote=${encoded}`},
        {name:'Twitter', href:`https://twitter.com/intent/tweet?text=${encoded}`},
        {name:'Telegram', href:`https://t.me/share/url?url=${encoded}&text=${encoded}`},
        {name:'Copy', href:'#copy'}
      ];
      shareFallback.style.display='flex';
      links.forEach(l=>{
        const a=document.createElement('a'); a.textContent=l.name; a.href=l.href; a.target='_blank'; a.rel='noopener';
        if(l.href==='#copy'){
          a.addEventListener('click', (ev)=>{ev.preventDefault(); navigator.clipboard.writeText(text).then(()=>{a.textContent='Copied!'; setTimeout(()=>a.textContent='Copy',1200);});});
        }
        shareFallback.appendChild(a);
      });
    });

    /* =========================
       Camera scanning (getUserMedia)
       ========================= */
    async function listCameras(){
      try{
        const devices = await navigator.mediaDevices.enumerateDevices();
        devicesCache = devices.filter(d=>d.kind==='videoinput');
        // clear & fill
        cameraSelect.innerHTML = '';
        // Prefer back camera if we can guess from label
        devicesCache.forEach((d,i)=>{
          const opt = document.createElement('option');
          opt.value = d.deviceId;
          const label = d.label || `Camera ${i+1}`;
          opt.textContent = label;
          cameraSelect.appendChild(opt);
        });
        // Add a special "prefer back" virtual option at top if multiple exist
        if(devicesCache.length>1){
          const auto = document.createElement('option');
          auto.value = 'prefer-back';
          auto.textContent = 'Prefer back camera';
          cameraSelect.insertBefore(auto, cameraSelect.firstChild);
          cameraSelect.value = 'prefer-back';
        }
      }catch(e){
        // If permission not granted yet, keep default
      }
    }

    async function startScan(){
      stopScan();
      // constraints
      let constraints = { video: { width: { ideal: 1280 }, height:{ ideal:720 }, facingMode: 'environment' }, audio:false };
      const selected = cameraSelect.value;
      if(selected && selected !== 'prefer-back'){
        constraints = { video: { deviceId: { exact: selected } }, audio:false };
      }
      try{
        scanStream = await navigator.mediaDevices.getUserMedia(constraints);
        video.srcObject = scanStream;
        await video.play();
        btnStart.style.display='none'; btnStop.style.display='inline-block';
        tickScan();
      }catch(err){
        alert('Camera error: '+ (err.name || err.message) + '\nMake sure page is HTTPS (or localhost) and camera permission is allowed.');
        btnStart.style.display='inline-block'; btnStop.style.display='none';
      }
    }

    function stopScan(){
      if(rafId) cancelAnimationFrame(rafId), rafId=null;
      if(scanStream){ scanStream.getTracks().forEach(t=>t.stop()); scanStream=null; }
      video.srcObject = null;
      btnStart.style.display='inline-block'; btnStop.style.display='none';
    }

    function tickScan(){
      if(!scanStream) return;
      const canvas = document.createElement('canvas');
      const w = video.videoWidth || 640, h = video.videoHeight || 480;
      canvas.width = w; canvas.height = h;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(video, 0, 0, w, h);
      const imageData = ctx.getImageData(0, 0, w, h);
      let found = null;

      try{
        // Try QR first
        const qr = jsQR(imageData.data, w, h, { inversionAttempts: "attemptBoth" });
        if(qr && qr.data) found = qr.data;
      }catch(e){}

      if(found){
        resultText.textContent = found;
        stopScan();
      }else{
        rafId = requestAnimationFrame(tickScan);
      }
    }

    btnStart.addEventListener('click', async ()=>{
      // ask for permission once to reveal device labels, then list
      try{
        if(!(devicesCache && devicesCache.length)){
          await navigator.mediaDevices.getUserMedia({video:true,audio:false}).then(s=>s.getTracks().forEach(t=>t.stop())).catch(()=>{});
        }
      }catch(e){}
      await listCameras();
      startScan();
    });
    btnStop.addEventListener('click', stopScan);

    // Initial device listing (will be nameless if no permission yet)
    if(navigator.mediaDevices && navigator.mediaDevices.enumerateDevices){
      listCameras();
    }

    /* =========================
       Scan from image file
       ========================= */
    const imgFile = document.getElementById('imgFile');
    imgFile?.addEventListener('change', ()=>{
      const file = imgFile.files && imgFile.files[0];
      if(!file) return;
      const img = new Image();
      img.onload = ()=>{
        const canvas = document.createElement('canvas');
        canvas.width = img.width; canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img,0,0);
        const imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
        let read = null;
        try{
          const qr = jsQR(imageData.data, canvas.width, canvas.height, { inversionAttempts: "attemptBoth" });
          if(qr && qr.data) read = qr.data;
        }catch(e){}
        if(read){
          resultText.textContent = read;
          previewBox.innerHTML = '';
          const scaled = document.createElement('canvas');
          const scale = Math.min(380/img.width, 380/img.height, 1);
          scaled.width = img.width*scale; scaled.height = img.height*scale;
          scaled.getContext('2d').drawImage(img,0,0,scaled.width,scaled.height);
          previewBox.appendChild(scaled);
        } else {
          alert('No QR code detected in this image.');
        }
      };
      const reader = new FileReader();
      reader.onload = e => img.src = e.target.result;
      reader.readAsDataURL(file);
    });

    // Persistence (optional)
    window.addEventListener('beforeunload', ()=>{
      try{ localStorage.setItem('qr_last', resultText.textContent||''); }catch(e){}
    });
    (function(){ const last=localStorage.getItem('qr_last'); if(last){ resultText.textContent=last; }})();

  </script>
</body>
</html>
